include:
  - project: prod.devops.automation.library/module/semantic_release
    ref: v1.1.3
    file: templates/api.yaml

  - project: prod.devops.automation.library/module/gitlab_release
    ref: v0.3.0
    file: templates/api.yaml

####################################
#### jobs workflow templates
.release:
  cache: {}
  rules:
    - if: $CI_COMMIT_TAG
      when: never
    #- if: $CI_COMMIT_REF_NAME == "master"
    #- if: $CI_COMMIT_REF_NAME =~ /^release/
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: never
    - when: never

#### module variables (prod.devops.automation.library/module/semantic_release)
.semantic_release.variables:
  variables:
    GIT_STRATEGY: clone
    GIT_DEPTH: 1
    semantic_release_branches: ${CI_COMMIT_REF_NAME}
    semantic_release_tag_format: "${CI_COMMIT_REF_SLUG}-$${version}"
    semantic_release_exec_enabled: "true"
    semantic_release_prepare_cmd: "gitlab-ci/build/bumpversion.sh"
    semantic_release_prepare_cmd_options: "$${lastRelease.gitTag} $${nextRelease.gitTag} $${nextRelease.type}"
    semantic_release_success_cmd: "gitlab-ci/build/post-release.sh"
    semantic_release_success_cmd_options: "$${nextRelease.gitTag} && echo '$${releases[1].notes}' > /tmp/release_notes.md && gitlab-ci/build/pre-notify.sh $${releases[1].type} $${releases[1].url} /tmp/release_notes.md"
    semantic_release_git_message: "chore(release): $${nextRelease.gitTag} \n\n$${nextRelease.notes}"
    semantic_release_additional_assets: "gitlab-ci/build/build.yaml"
    #### From gitlab secrets variables:
    # GITLAB_TOKEN

#### module variables (prod.devops.automation.library/module/gitlab_release)
.gitlab_release.variables:
  variables:
    gitlab_release_description_output: "release_notes.json"
    gitlab_release_description: updated_release_notes.md

####### Semantic Release
semantic-release:
  extends:
    - .semantic_release.release
    - .release
  stage: semantic_release
  #before_script:
  #  - . ${CI_PROJECT_DIR}/scripts/git_commit.sh
  artifacts:
    paths:
      - release_notes.md
      - triggered_info.md
      - pipeline_metadata.env

# Gitlab Release
get_release_notes:
  extends:
    - .gitlab_release.get_release_cli
    - .build_promote
  stage: gitlab_release

update_release_notes:
  extends:
    - .gitlab_release.update_release_cli
    - .build_promote
  stage: gitlab_release
  before_script: |
    cat ${gitlab_release_description_output} | jq '.description' -r > ${gitlab_release_description}
    json_path=$(cat archive.yaml | grep -E "RELEASE.json")
    json_data=$(curl ${json_path})
    data_gav=$(cat GAV_coordinates.yaml)
    maven_repository="$(echo "${json_data}" | jq -r '.configurations[0].maven_repository')"
    artifacts_name="$(echo "${json_data}" | jq -r '.configurations[0].artifacts[0].name')"
    artifacts_id="$(echo "${json_data}" | jq -r '.configurations[0].artifacts[0].id')"
    IFS='/' read -r -a array_maven <<< "$maven_repository"
    IFS='/' read -r -a array_name <<< "$json_path"
    IFS=':' read -r -a array_id <<< "$artifacts_id"
    cat ${gitlab_release_description_output} | jq '.description' -r > ${gitlab_release_description}
    echo -e "\`\`\`yaml \n${data_gav}\n\`\`\`\n\n$(cat ${gitlab_release_description})" > ${gitlab_release_description}
    echo -e "${maven_repository}/$( echo ${array_id[0]} | tr "." "/")/${array_id[1]}/${array_id[2]}/${artifacts_name}\n\n$(cat ${gitlab_release_description})" > ${gitlab_release_description}
    echo -e "#### Artifact\n\`$(cat archive.yaml | grep -E ":zip:" )\`\n\n$(cat ${gitlab_release_description})" > ${gitlab_release_description}
  after_script:
    - curl --header "PRIVATE-TOKEN:${GITLAB_TOKEN}" "$CI_API_V4_URL/projects/$CI_PROJECT_ID/jobs/artifacts/$CI_DEFAULT_BRANCH/raw/release_notes.md?job=semantic-release" --output release_notes.md
    - curl --header "PRIVATE-TOKEN:${GITLAB_TOKEN}" "$CI_API_V4_URL/projects/$CI_PROJECT_ID/jobs/artifacts/$CI_DEFAULT_BRANCH/raw/triggered_info.md?job=semantic-release" --output triggered_info.md
    - curl --header "PRIVATE-TOKEN:${GITLAB_TOKEN}" "$CI_API_V4_URL/projects/$CI_PROJECT_ID/jobs/artifacts/$CI_DEFAULT_BRANCH/raw/pipeline_metadata.env?job=semantic-release" --output pipeline_metadata.env
  needs:
    - get_release_notes
    - dp_build_promote
  artifacts:
    paths:
      - release_notes.md
      - triggered_info.md
      