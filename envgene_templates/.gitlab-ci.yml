---
default:
  tags:
    - myrunner2

stages:
  - prefix_build
  - dp_build


.build_and_commit_parameters_containers:
  image:
    name: "ghcr.io/netcracker/qubership-build-envgene:main"
  extends:
    - .envgen.variables
  stage: prefix_build
  script:
    - python3 /build_env/scripts/build_env/parameter_container_handler.py
  after_script:
    - /module/scripts/prepare.sh "git_commit.yaml"
  artifacts:
    when: always
    paths:
      - ${CI_PROJECT_DIR}/templates
      - ${CI_PROJECT_DIR}/gitlab-ci

build_and_commit_parameters_containers:
  extends:
    - .build_and_commit_parameters_containers
  stage: prefix_build
  when: manual


.prefix_build:
  image:
    name: "ghcr.io/netcracker/qubership-build-envgene:main"
  extends:
    - .envgen.variables
  stage: prefix_build
  script:
    - /module/scripts/prepare.sh "build.yaml"
  tags:
    - myrunner
  timeout: 2h
######################################################################

prepare_zip:
  stage: dp_build
  when: manual
  script:
    - chmod +x ./build.sh
    - ./build.sh





###################################
#VARIABLES
.usable_variables:
  variables:
    INCLUDE_BUILDS:
      value: "true"
      description: "Whether to run build, possible values - true/false"
    ENV_NAMES:
      value: "env_template_test"
      description: "Set ENV_NAMES - multiple items supported using Shift+Enter new lines"
    ENV_TEMPLATE_TEST:
      value: "false"
      description: "possible values - true/false"
    ENV_BUILDER:
      value: "true"
      description: "Whether to run env_builder, possible values - true/false"
    GET_PASSPORT:
      value: "false"
      description: "Whether to get cloud passport, possible values - true/false"
    CMDB_IMPORT:
      value: "true"
      description: "Whether to import cmdb, possible values - true/false"

###############################################

.empty:
  variables:
    run: true

.generate_pipeline_variables:
  rules:
    - if: $CI_COMMIT_MESSAGE =~ /\[ct_skip]/
      when: never
    - if: $CI_COMMIT_TITLE =~ /chore\(release\):.*/
      when: never
    - if: $CI_COMMIT_MESSAGE =~ /\[ci_build_parameters]/
      when: never
    - if: $CI_COMMIT_REF_NAME =~ /^feature/ && $ENV_TEMPLATE_TEST == "true"
    # temporary
    - if: $CI_COMMIT_REF_NAME =~ /^release/ && $ENV_TEMPLATE_TEST == "true"
    - if: $CI_COMMIT_REF_NAME =~ /^evergreen/ && $ENV_TEMPLATE_TEST == "true"
    - if: $CI_COMMIT_REF_NAME =~ /master/ && $ENV_TEMPLATE_TEST == "true"
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: never

.environment.variables:
  variables:
    env_name: ${ENV_NAME}
    ENV_TEMPLATE_VERSION: ${ENV_TEMPLATE_VERSION}
    DEPLOYMENT_TICKET_ID: ${DEPLOYMENT_TICKET_ID}
    # tenant_name: ${TENANT_NAME}
    # cloud_name: ${CLOUD_NAME}

####################################
.common_module.variables:
  extends: .environment.variables
  variables:
    # ansible directory inside module's docker image
    module_ansible_dir: /module/ansible
    # ansible inventory path inside Configuration Management repository
    module_inventory: "${CI_PROJECT_DIR}/configuration/inventory.yaml"
    # ansible directory inside module's docker image
    module_ansible_cfg: /module/ansible/ansible.cfg
    # path to the module/job default parameters inside module's docker image
    module_config_default: /module/templates/defaults.yaml

####################################

.cloud.deploytool.variables:
  extends:
    - .environment.variables
  variables:
    GIT_STRATEGY: clone
    cloud_deploytool_image: artifactorycn.netcracker.com:17014/product/env-generator-deploytool_build_deploytool:v2.31.3
    DEPLOY_MODULE_ARGS: ""
    INSTANCES_DIR: "${CI_PROJECT_DIR}/environments"
    OUTPUT_DIR: output_dir
    CRED_SCHEMA_PATH: /schemas/credential.schema.json
    CONFIG_FOLDER: "${CI_PROJECT_DIR}/${OUTPUT_DIR}"

.deploytool_import:
  image: ${cloud_deploytool_image}
  extends:
    - .cloud.deploytool.variables
  script:
    - /work/cmdb_prepare cmdb
    - /work/cmdb_prepare deployer && source /tmp/cmdb_cred.sh
    - if [ -z $API_TOKEN ]; then echo -e "\e[91mThe variable API_TOKEN is not defined" && exit 1; fi
    - echo "deployer URL - $CMDB_URL"
    - echo "deployer username - $CMDB_USERNAME"
    - echo "cli version - deploycli-assembly-release-0.3.2:build2"
    # - /work/application config import -s $CONFIG_FOLDER/Registries/
    # - /work/application config import -s $CONFIG_FOLDER/ApplicationsDefinition/
    - /work/application config import -s $CONFIG_FOLDER/Tenants/
    # - /work/application config import -s $CONFIG_FOLDER/Tenants/
  rules:
    - if: $ENV_NAME && $ENV_NAME != "" && $CMDB_IMPORT == "true"

####################################
.envgen.variables:
  extends:
    - .environment.variables
    - .common_module.variables
  variables:
    envgen_image: artifactorycn.netcracker.com:17014/product/env-generator-envgene_build_envgene:v2.31.3
    pipe_image: artifactorycn.netcracker.com:17014/product/env-generator-gcip_build_gcip:v2.31.3
    cloud_deploytool_image: artifactorycn.netcracker.com:17014/product/env-generator-deploytool_build_deploytool:v2.31.3
    effective_set_generator_image: artifactorycn.netcracker.com:17014/product/env-generator-effective-set-generator_build_effective_set_generator:v2.31.3
    envgen_args: " -vv"
    envgen_debug: "true"

####################################

.envgen.env_template_version:
  image:
    name: "${envgen_image}"
  extends:
    - .envgen.variables
  script:
    - /module/scripts/prepare.sh "set_template_version.yaml"
    - export env_name=$(echo $ENV_NAME | awk -F '/' '{print $NF}')
    - env_path=$(sudo find ${CI_PROJECT_DIR}/environments -type d -name "${env_name}"); for path in $env_path; do if [ -d "$path/Credentials" ]; then sudo chmod ugo+rw ${path}/Credentials/*; fi; done
  artifacts:
    when: always
    paths:
      - ${CI_PROJECT_DIR}/environments
  rules:
    - if: $ENV_NAME && $ENV_NAME != "" && $ENV_TEMPLATE_VERSION != ""

.envgen.env_builder:
  image:
    name: "${envgen_image}"
  extends:
    - .envgen.variables
  before_script:
    - if [ -d "${CI_PROJECT_DIR}/configuration/certs" ]; then
    - env_path=$(ls -A "${CI_PROJECT_DIR}/configuration/certs");
    - for path in $env_path; do . /module/scripts/update_ca_cert.sh ${CI_PROJECT_DIR}/configuration/certs/$path; done; fi
  script:
    - /module/scripts/prepare.sh "build_env.yaml"
    - export env_name=$(echo $ENV_NAME | awk -F '/' '{print $NF}')
    - env_path=$(sudo find ${CI_PROJECT_DIR}/environments -type d -name "${env_name}"); for path in $env_path; do if [ -d "$path/Credentials" ]; then sudo chmod ugo+rw ${path}/Credentials/*; fi; done
  artifacts:
    when: always
    paths:
      - ${CI_PROJECT_DIR}/environments
      - ${CI_PROJECT_DIR}/configuration/artifact_definitions
  rules:
    - if: $ENV_NAME && $ENV_NAME != "" && $ENV_BUILDER == "true"

.envgen.generate_effective_set:
  image:
    name: "${effective_set_generator_image}"
  extends:
    - .envgen.variables
  script:
    - /module/scripts/prepare.sh "generate_effective_set.yaml"
    - export env_name=$(echo $ENV_NAME | awk -F '/' '{print $NF}')
    - env_path=$(sudo find ${CI_PROJECT_DIR}/environments -type d -name "${env_name}"); for path in $env_path; do if [ -d "$path/Credentials" ]; then sudo chmod ugo+rw ${path}/Credentials/*; fi; done
  artifacts:
    when: always
    paths:
      - ${CI_PROJECT_DIR}/environments
  rules:
    - if: $ENV_NAME && $ENV_NAME != "" && $ENV_TEMPLATE_VERSION != ""

.envgen.trigger_passport:
  trigger:
    project: PROD.INMRND.MANO/DevOps/ReleaseEngineering/SandboxTestEnvironment/configuration-management/discovery-tool
    branch: master
    strategy: depend
  variables:
    ENV_NAME: ${ENV_NAME}
    GET_PASSPORT: ${GET_PASSPORT}
  rules:
    - if: $ENV_NAMES && $ENV_NAMES != ""
      when: never
    - if: $ENV_NAME && $ENV_NAME != "" && $GET_PASSPORT == "true"

.envgen.get_passport:
  image:
    name: "${envgen_image}"
  extends:
    - .envgen.variables
  script:
    - /module/scripts/prepare.sh "get_cloud_passport.yaml"
    - env_path=$(sudo find ${CI_PROJECT_DIR}/environments -type d -name "${ENV_NAME}"); for path in $env_path; do if [ -d "$path/Credentials" ]; then sudo chmod ugo+rw ${path}/Credentials/*; fi; done
  artifacts:
    when: always
    paths:
      - ${CI_PROJECT_DIR}/environments
  rules:
    - if: $ENV_NAME && $ENV_NAME != "" && $GET_PASSPORT == "true"

# CUT OFF FOR OPERATIONS PORTAL START
.envgen.process_decryption_mode:
  image:
    name: "${envgen_image}"
  extends:
    - .envgen.variables
  script:
    - python3 /module/scripts/process_decryption_mode.py -s "${SECRET_KEY}" -e "${ENV_NAME}"
  artifacts:
    when: always
    paths:
      - ${CI_PROJECT_DIR}/environments/
  rules:
    - if: $ENV_NAME && $ENV_NAME != "" && $GET_PASSPORT =="true"
# CUT OFF FOR OPERATIONS PORTAL END

.envgen.git_commit:
  image:
    name: "${envgen_image}"
  extends:
    - .envgen.variables
  script:
    - /module/scripts/prepare.sh "git_commit.yaml"
    - export env_name=$(echo $ENV_NAME | awk -F '/' '{print $NF}')
    - env_path=$(sudo find ${CI_PROJECT_DIR}/environments -type d -name "${env_name}"); for path in $env_path; do if [ -d "$path/Credentials" ]; then sudo chmod ugo+rw ${path}/Credentials/*; fi; done
    - mkdir ${CI_PROJECT_DIR}/git_envs
    - cp -rf ${CI_PROJECT_DIR}/environments ${CI_PROJECT_DIR}/git_envs
  artifacts:
    when: always
    paths:
      - ${CI_PROJECT_DIR}/environments
      - ${CI_PROJECT_DIR}/git_envs
  rules:
    - if: $ENV_NAME && $ENV_NAME != ""
    - if: $ENV_BUILDER == "true" || $ENV_TEMPLATE_VERSION != "" || $GET_PASSPORT == "true"

.envgen.report_template_artifacts:
  image:
    name: "${envgen_image}"
  extends:
    - .envgen.variables
  script:
    - python3 /module/scripts/report.py

### Dynamic pipeline when ENV_NAMES is defined and not null
.generate_pipeline:
  image:
    name: "${pipe_image}"
  extends:
    - .envgen.variables
  script:
    - python /module/scripts/main.py generate_pipeline
  # CUT OFF FOR OPERATIONS PORTAL START
  variables:
    IS_OFFSITE: "true"
  # CUT OFF FOR OPERATIONS PORTAL END
  rules:
    - if: $ENV_NAMES && $ENV_NAMES != ""
  artifacts:
    when: always
    paths:
      - ${CI_PROJECT_DIR}/generated-config.yml

.run_generated_pipeline:
  needs:
    - generate_pipeline
  extends:
    - .envgen.variables
  trigger:
    include:
      - artifact: generated-config.yml
        job: generate_pipeline
    strategy: depend
  rules:
    - if: $ENV_NAMES && $ENV_NAMES != ""