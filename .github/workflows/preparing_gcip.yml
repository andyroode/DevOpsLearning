name: EnvGene Execution

permissions:
  contents: write
  pull-requests: write

on:
  workflow_dispatch:
  push:
    paths:
      - ".github/workflows/preparing_gcip.yml"
      - ".github/config/env_config.yaml"

jobs:
  show_environment_variables:
    runs-on: ubuntu-latest
    outputs:
      env_matrix: ${{ steps.matrix-generator.outputs.env_matrix }}
    env:
      CI_COMMIT_REF_NAME: ${{ github.ref_name }}
      CI_PROJECT_DIR: ${{ github.workspace }}
    steps:
      - name: Repository Checkout
        uses: actions/checkout@v4

      - name: Read environment variables
        run: |
          python .github/scripts/load_env_params.py .github/config/env_config.yaml >> $GITHUB_ENV

      - name: Environment variables values
        run: |
          echo "ENV_NAMES = $ENV_NAMES"
          echo "ENV_BUILDER = $ENV_BUILDER"
          echo "GENERATE_EFFECTIVE_SET = $GENERATE_EFFECTIVE_SET"
          echo "ENV_TEMPLATE_VERSION = $ENV_TEMPLATE_VERSION"
          echo "ENV_TEMPLATE_TEST = $ENV_TEMPLATE_TEST"
          echo "ENV_INVENTORY_INIT = $ENV_INVENTORY_INIT"
          echo "IS_OFFSITE = $IS_OFFSITE"
          echo "JSON_SCHEMAS_DIR = $JSON_SCHEMAS_DIR"
          echo "SD_DATA = $SD_DATA"
          echo "SD_VERSION = $SD_VERSION"

      - name: Convert ENV_NAMES to JSON array
        id: matrix-generator
        shell: bash
        run: |
          arr="["
          first=1
          for name in $(echo "$ENV_NAMES" | tr ',' ' '); do
            if [ "$first" = 1 ]; then
              first=0
            else
              arr="$arr,"
            fi
            arr="$arr\"$name\""
          done
          arr="$arr]"
          
          echo "env_matrix=$arr" >> $GITHUB_OUTPUT    

  parameters_validation:
    name: ${{ matrix.environment }}
    runs-on: ubuntu-latest
    needs: show_environment_variables
    strategy:
      fail-fast: false
      matrix:
        environment: ${{ fromJson(needs.show_environment_variables.outputs.env_matrix) }}
    env:
      CI_COMMIT_REF_NAME: ${{ github.ref_name }}
      CI_PROJECT_DIR: "/repo"
      SECRET_KEY: ${{ secrets.SECRET_KEY }}
    steps:
      - name: Repository Checkout
        uses: actions/checkout@v4

      - name: Read environment variables
        run: |
          python .github/scripts/load_env_params.py .github/config/env_config.yaml >> $GITHUB_ENV

      - name: EnvGene parameters validation
        run: |
          export ENV_NAME="${{ matrix.environment }}"
          chmod +x .github/scripts/execute_parameters_validation.sh
          .github/scripts/execute_parameters_validation.sh

  generate_inventory:
    name: ${{ matrix.environment }}
    runs-on: ubuntu-latest
    needs:
      - parameters_validation
      - show_environment_variables
    strategy:
      fail-fast: false
      matrix:
        environment: ${{ fromJson(needs.show_environment_variables.outputs.env_matrix) }}
    env:
      CI_COMMIT_REF_NAME: ${{ github.ref_name }}
      CI_PROJECT_DIR: "/repo"
      SECRET_KEY: ${{ secrets.SECRET_KEY }}
    steps:
      - name: Repository Checkout
        uses: actions/checkout@v4

      - name: Read environment variables
        run: |
          python .github/scripts/load_env_params.py .github/config/env_config.yaml >> $GITHUB_ENV

      - name: Generate inventory
        run: |
          export ENV_NAME="${{ matrix.environment }}"
          chmod +x .github/scripts/execute_generate_inventory.sh
          .github/scripts/execute_generate_inventory.sh

      - name: Commit files
        run: |
          git config --local user.email "${{ secrets.GIT_USER_EMAIL }}"
          git config --local user.name "${{ secrets.GIT_USER_NAME }}"
          sudo chown -R $USER:$USER environments/
          sudo chmod -R +rw environments/
          git reset --hard
          git pull --rebase origin main || git reset --hard origin/main
          git add .
          git commit -m "Adding generated files to EnvGene repository." || echo "No changes to commit"
          git push origin main || (git pull --rebase origin main && git push origin main)

  env_build:
    name: ${{ matrix.environment }}
    runs-on: ubuntu-latest
    needs:
      - generate_inventory
      - show_environment_variables
    strategy:
      fail-fast: false
      matrix:
        environment: ${{ fromJson(needs.show_environment_variables.outputs.env_matrix) }}
    env:
      CI_COMMIT_REF_NAME: ${{ github.ref_name }}
      CI_PROJECT_DIR: ${{ github.workspace }}
      SECRET_KEY: ${{ secrets.SECRET_KEY }}
    steps:
      - name: Repository Checkout
        uses: actions/checkout@v4

      - name: Read environment variables
        run: |
          python .github/scripts/load_env_params.py .github/config/env_config.yaml >> $GITHUB_ENV

      - name: Build Env
        run: |
          export ENV_NAME="${{ matrix.environment }}"
          chmod +x .github/scripts/execute_env_build.sh
          .github/scripts/execute_env_build.sh
          
      - name: Commit files
        run: |
          git config --local user.email "${{ secrets.GIT_USER_EMAIL }}"
          git config --local user.name "${{ secrets.GIT_USER_NAME }}"

          sudo chown -R $USER:$USER environments/
          sudo chmod -R +rw environments/

          git reset --hard

          git pull --rebase origin main || git reset --hard origin/main

          git add .
          git commit -m "Adding generated files to EnvGene repository." || echo "No changes to commit"

          git push origin main || (git pull --rebase origin main && git push origin main)        
          
          
          
          
          
          

 # git_commit:
 #   runs-on: ubuntu-latest
 #   needs:
 #     - generate_inventory
 #     - show_environment_variables
 #   strategy:
 #     fail-fast: false
 #     matrix:
 #       environment: ${{ fromJson(needs.show_environment_variables.outputs.env_matrix) }}
 #   env:
 #     CI_COMMIT_REF_NAME: ${{ github.ref_name }}
 #     CI_PROJECT_DIR: "/repo"
 #     GITHUB_USER_EMAIL: ${{ secrets.GIT_USER_EMAIL }}
 #     GITHUB_USER_NAME: ${{ secrets.GIT_USER_NAME }}
 #     GITHUB_TOKEN: ${{ secrets.MY_GITHUB_TOKEN }}
 #   steps:
 #     - name: Repository Checkout
 #       uses: actions/checkout@v4
#
 #     - name: Read environment variables
 #       run: |
 #         python .github/scripts/load_env_params.py .github/config/env_config.yaml >> $GITHUB_ENV
#
 #     - name: Git Commit
 #       run: |
 #         echo "GITHUB_USER_EMAIL=${{ secrets.GIT_USER_EMAIL }}" >> $GITHUB_ENV
 #         echo "GITHUB_USER_NAME=${{ secrets.GIT_USER_NAME }}" >> $GITHUB_ENV
 #         echo "GITHUB_TOKEN=${{ secrets.MY_GITHUB_TOKEN }}" >> $GITHUB_ENV
 #         export ENV_NAME="${{ matrix.environment }}"
 #         chmod +x .github/scripts/execute_git_commit.sh
 #         .github/scripts/execute_git_commit.sh
#