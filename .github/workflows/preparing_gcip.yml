name: EnvGene Execution

permissions:
  contents: write
  pull-requests: write

on:
  workflow_dispatch:
  push:
    paths:
      - ".github/workflows/preparing_gcip.yml"
      - ".github/config/env_config.yaml"

jobs:
  show_environment_variables:
    runs-on: ubuntu-latest
    outputs:
      env_matrix: ${{ steps.matrix-generator.outputs.env_matrix }}
    env:
      CI_COMMIT_REF_NAME: ${{ github.ref_name }}
      CI_PROJECT_DIR: ${{ github.workspace }}
    steps:
      - name: Repository Checkout
        uses: actions/checkout@v4

      - name: Read environment variables
        run: |
          python .github/scripts/load_env_params.py .github/config/env_config.yaml >> $GITHUB_ENV

      - name: Environment variables values
        run: |
          echo "ENV_NAMES = $ENV_NAMES"
          echo "ENV_BUILDER = $ENV_BUILDER"
          echo "GENERATE_EFFECTIVE_SET = $GENERATE_EFFECTIVE_SET"
          echo "ENV_TEMPLATE_VERSION = $ENV_TEMPLATE_VERSION"
          echo "ENV_TEMPLATE_TEST = $ENV_TEMPLATE_TEST"
          echo "ENV_INVENTORY_INIT = $ENV_INVENTORY_INIT"
          echo "IS_OFFSITE = $IS_OFFSITE"
          echo "JSON_SCHEMAS_DIR = $JSON_SCHEMAS_DIR"
          echo "SD_DATA = $SD_DATA"
          echo "SD_VERSION = $SD_VERSION"

      - name: Convert ENV_NAMES to JSON array
        id: matrix-generator
        shell: bash
        run: |
          arr="["
          first=1
          for name in $(echo "$ENV_NAMES" | tr ',' ' '); do
            if [ "$first" = 1 ]; then
              first=0
            else
              arr="$arr,"
            fi
            arr="$arr\"$name\""
          done
          arr="$arr]"
          
          echo "env_matrix=$arr" >> $GITHUB_OUTPUT    

  parameters_validation:
    name: ${{ matrix.environment }}
    runs-on: ubuntu-latest
    needs: show_environment_variables
    container:
      image: ghcr.io/netcracker/qubership-build-gcip:main
      options: --user root
    strategy:
      fail-fast: false
      matrix:
        environment: ${{ fromJson(needs.show_environment_variables.outputs.env_matrix) }}
    env:
      CI_COMMIT_REF_NAME: ${{ github.ref_name }}
      CI_PROJECT_DIR: ${{ github.workspace }}
    steps:
      - name: Repository Checkout
        uses: actions/checkout@v4

      - name: Read environment variables
        run: |
          python .github/scripts/load_env_params.py .github/config/env_config.yaml >> $GITHUB_ENV

      - name: EnvGene parameters validation
        run: |
          export ENV_NAME="${{ matrix.environment }}"
          python /module/scripts/github_actions.py validate_pipeline

  generate_inventory:
    name: ${{ matrix.environment }}
    runs-on: ubuntu-latest
    needs:
      - parameters_validation
      - show_environment_variables
    container:
      image: ghcr.io/netcracker/qubership-build-envgene:feature-build-pipeline
      options: --user root
    strategy:
      fail-fast: false
      matrix:
        environment: ${{ fromJson(needs.show_environment_variables.outputs.env_matrix) }}
    env:
      CI_COMMIT_REF_NAME: ${{ github.ref_name }}
      CI_PROJECT_DIR: ${{ github.workspace }}
      SECRET_KEY: ${{ secrets.SECRET_KEY }}
      FULL_ENV: ${{ matrix.environment }}
    steps:
      - name: Repository Checkout
        uses: actions/checkout@v4

      - name: Read environment variables
        run: |
          python .github/scripts/load_env_params.py .github/config/env_config.yaml >> $GITHUB_ENV

      - name: Generate inventory
        run: |
          
          export CLUSTER_NAME=$(echo "${{ matrix.environment }}" | cut -d'/' -f1)
          export ENVIRONMENT_NAME=$(echo "${{ matrix.environment }}" | cut -d'/' -f2 | xargs)
          
          export ENV_NAME=$ENVIRONMENT_NAME
          
          export ENV_GENERATION_PARAMS="$(jq -nc \
            --arg sd_source_type "${SD_SOURCE_TYPE:-""}" \
            --arg sd_version "${SD_VERSION:-""}" \
            --arg sd_data "${SD_DATA:-"{}"}" \
            --arg sd_delta "${SD_DELTA:-""}" \
            --arg env_inventory_init "${ENV_INVENTORY_INIT:-""}" \
            --arg env_specific_params "${ENV_SPECIFIC_PARAMETERS:-""}" \
            --arg env_template_name "${ENV_TEMPLATE_NAME:-""}" \
            --arg env_template_version "${ENV_TEMPLATE_VERSION:-""}" \
            '{
              "SD_SOURCE_TYPE": $sd_source_type,
              "SD_VERSION": $sd_version,
              "SD_DATA": $sd_data,
              "SD_DELTA": $sd_delta,
              "ENV_INVENTORY_INIT": $env_inventory_init,
              "ENV_SPECIFIC_PARAMETERS": $env_specific_params,
              "ENV_TEMPLATE_NAME": $env_template_name,
              "ENV_TEMPLATE_VERSION": $env_template_version
            }'
          )"
          
          python3 /build_env/scripts/build_env/env_inventory_generation.py


      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: environments
          path: ${{ github.workspace }}/environments/${{ env.FULL_ENV }}
        if: ${{ always() }}

      #- name: Commit files
      #  run: |
      #    sudo chown -R $(id -u):$(id -g) ${CI_PROJECT_DIR}
      #    sudo chmod -R +rw ${CI_PROJECT_DIR}
      #    git config --local user.email "${{ secrets.GIT_USER_EMAIL }}"
      #    git config --local user.name "${{ secrets.GIT_USER_NAME }}"
      #    git reset --hard
      #    git pull --rebase origin main || git reset --hard origin/main
      #    git add .
      #    git commit -m "Adding generated files to EnvGene repository." || echo "No changes to commit"
      #    git push origin main || (git pull --rebase origin main && git push origin main)

  env_build:
    name: ${{ matrix.environment }}
    runs-on: ubuntu-latest
    needs:
      - parameters_validation
      - generate_inventory
      - show_environment_variables
    container:
      image: ghcr.io/netcracker/qubership-build-envgene:feature-build-pipeline
    strategy:
      fail-fast: false
      matrix:
        environment: ${{ fromJson(needs.show_environment_variables.outputs.env_matrix) }}
    env:
      CI_COMMIT_REF_NAME: ${{ github.ref_name }}
      CI_PROJECT_DIR: ${{ github.workspace }}
      SECRET_KEY: ${{ secrets.SECRET_KEY }}
    steps:
      - name: Repository Checkout
        uses: actions/checkout@v4

      - name: Read environment variables
        run: |
          python .github/scripts/load_env_params.py .github/config/env_config.yaml >> $GITHUB_ENV

      - name: Build Env
        run: |
          export ENV_NAME_SHORT=$(echo "$ENV_NAME" | awk -F "/" "{print \$NF}")
          export ENV_TEMPLATE_TEST="$ENV_TEMPLATE_TEST"
          export CLUSTER_NAME=$(echo "${{ matrix.environment }}" | cut -d'/' -f1)
          export ENVIRONMENT_NAME=$(echo "${{ matrix.environment }}" | cut -d'/' -f2 | xargs)
          export ENV_NAME=$ENVIRONMENT_NAME
          export CI_PROJECT_DIR="$CI_PROJECT_DIR"
          export ENV_TEMPLATE_VERSION="$ENV_TEMPLATE_VERSION"
          export GROUP_ID="$GROUP_ID"
          export ARTIFACT_ID="$ARTIFACT_ID"
          export GROUP_ID=""
          export ARTIFACT_ID=""
          export INSTANCES_DIR="${CI_PROJECT_DIR}/environments"
          export module_ansible_dir="/module/ansible"
          export module_inventory="${CI_PROJECT_DIR}/configuration/inventory.yaml"
          export module_ansible_cfg="/module/ansible/ansible.cfg"
          export module_config_default="/module/templates/defaults.yaml"
          export envgen_args=" -vvv"
          export envgen_debug="true"
          export GIT_STRATEGY="none"
          export COMMIT_ENV="true"
          export SECRET_KEY="${SECRET_KEY}"
          export GITHUB_ACTIONS="${GITHUB_ACTIONS}"
          export GITHUB_REPOSITORY="${GITHUB_REPOSITORY}"
          export GITHUB_REF_NAME="${GITHUB_REF_NAME}"
          export GITHUB_USER_EMAIL="${GITHUB_USER_EMAIL}"
          export GITHUB_USER_NAME="${GITHUB_USER_NAME}" 
          export GITHUB_TOKEN="${GITHUB_TOKEN}"
    
          if [ -d "${CI_PROJECT_DIR}/configuration/certs" ]; then
            cert_path=$(ls -A "${CI_PROJECT_DIR}/configuration/certs")
            for path in $cert_path; do
              . /module/scripts/update_ca_cert.sh "${CI_PROJECT_DIR}/configuration/certs/$path"
            done
          fi
    
          if [ "$ENV_TEMPLATE_VERSION" != "" ] && [ "$ENV_TEMPLATE_TEST" == "false" ]; then
            /module/scripts/prepare.sh "set_template_version.yaml"
            /module/scripts/prepare.sh "build_env.yaml"
          else
            /module/scripts/prepare.sh "build_env.yaml"
          fi
    
          if [ "$ENV_TEMPLATE_TEST" == "true" ]; then
            env_name=$(cat set_variable.txt)
            sed -i "s|\\\"envgeneNullValue\\\"|\\\"test_value\\\"|g" "${CI_PROJECT_DIR}/environments/$env_name/Credentials/credentials.yml"
          else
            export env_name=$(echo "$ENV_NAME" | awk -F "/" "{print \$NF}")
          fi
    
          env_path=$(find "${CI_PROJECT_DIR}/environments" -type d -name "$env_name")
          for path in $env_path; do
            if [ -d "$path/Credentials" ]; then
              chmod ugo+rw "$path/Credentials/"*
            fi
          done
          
      - name: Commit files
        run: |
          git config --local user.email "${{ secrets.GIT_USER_EMAIL }}"
          git config --local user.name "${{ secrets.GIT_USER_NAME }}"

          sudo chown -R $USER:$USER environments/
          sudo chmod -R +rw environments/
          git reset --hard
          git pull --rebase origin main || git reset --hard origin/main

          git add .
          git commit -m "Adding generated files to EnvGene repository." || echo "No changes to commit"

          git push origin main || (git pull --rebase origin main && git push origin main)        
          
          
          
          
          
          

 # git_commit:
 #   runs-on: ubuntu-latest
 #   needs:
 #     - generate_inventory
 #     - show_environment_variables
 #   strategy:
 #     fail-fast: false
 #     matrix:
 #       environment: ${{ fromJson(needs.show_environment_variables.outputs.env_matrix) }}
 #   env:
 #     CI_COMMIT_REF_NAME: ${{ github.ref_name }}
 #     CI_PROJECT_DIR: "/repo"
 #     GITHUB_USER_EMAIL: ${{ secrets.GIT_USER_EMAIL }}
 #     GITHUB_USER_NAME: ${{ secrets.GIT_USER_NAME }}
 #     GITHUB_TOKEN: ${{ secrets.MY_GITHUB_TOKEN }}
 #   steps:
 #     - name: Repository Checkout
 #       uses: actions/checkout@v4
#
 #     - name: Read environment variables
 #       run: |
 #         python .github/scripts/load_env_params.py .github/config/env_config.yaml >> $GITHUB_ENV
#
 #     - name: Git Commit
 #       run: |
 #         echo "GITHUB_USER_EMAIL=${{ secrets.GIT_USER_EMAIL }}" >> $GITHUB_ENV
 #         echo "GITHUB_USER_NAME=${{ secrets.GIT_USER_NAME }}" >> $GITHUB_ENV
 #         echo "GITHUB_TOKEN=${{ secrets.MY_GITHUB_TOKEN }}" >> $GITHUB_ENV
 #         export ENV_NAME="${{ matrix.environment }}"
 #         chmod +x .github/scripts/execute_git_commit.sh
 #         .github/scripts/execute_git_commit.sh
#