name: Environment Inventory Generation

on:
  workflow_call:

jobs:
  generate_inventory:
    name: ${{ matrix.environment }}
    if: ${{ always() && (needs.show_environment_variables.outputs.ENV_TEMPLATE_TEST == 'true' && needs.show_environment_variables.outputs.ENV_SPECIFIC_PARAMETERS != '{}') }}
    runs-on: ubuntu-latest
    needs:
      - parameters_validation
      - show_environment_variables
    container:
      image: ghcr.io/netcracker/qubership-build-envgene:feature-build-pipeline
      options: --user root
    strategy:
      fail-fast: false
      matrix:
        environment: ${{ fromJson(needs.show_environment_variables.outputs.env_matrix) }}
    env:
      FULL_ENV: ${{ matrix.environment }}
    outputs:
      successful_env: ${{ steps.set_output.outputs.successful_env }}
    steps:
      - name: Repository Checkout
        uses: actions/checkout@v4

      - name: Read environment variables
        run: |
          python .github/scripts/load_env_params.py .github/config/env_config.yaml >> $GITHUB_ENV

      - name: Prepare variables to work with artifacts
        run: |
          echo "SANITIZED_NAME=$(echo "${{ matrix.environment }}" | sed 's|/|_|g')" >> $GITHUB_ENV
          echo "PROJECT_DIR=$(pwd)" >> $GITHUB_ENV

      - name: Generate inventory
        run: |
          export CLUSTER_NAME=$(echo "${{ matrix.environment }}" | cut -d'/' -f1)
          export ENVIRONMENT_NAME=$(echo "${{ matrix.environment }}" | cut -d'/' -f2 | xargs)
          export ENV_NAME=$ENVIRONMENT_NAME
          
          export ENV_GENERATION_PARAMS="$(jq -nc \
            --arg sd_source_type "${SD_SOURCE_TYPE:-""}" \
            --arg sd_version "${SD_VERSION:-""}" \
            --arg sd_data "${SD_DATA:-"{}"}" \
            --arg sd_delta "${SD_DELTA:-""}" \
            --arg env_inventory_init "${ENV_INVENTORY_INIT:-""}" \
            --arg env_specific_params "${ENV_SPECIFIC_PARAMETERS:-""}" \
            --arg env_template_name "${ENV_TEMPLATE_NAME:-""}" \
            --arg env_template_version "${ENV_TEMPLATE_VERSION:-""}" \
            '{
              "SD_SOURCE_TYPE": $sd_source_type,
              "SD_VERSION": $sd_version,
              "SD_DATA": $sd_data,
              "SD_DELTA": $sd_delta,
              "ENV_INVENTORY_INIT": $env_inventory_init,
              "ENV_SPECIFIC_PARAMETERS": $env_specific_params,
              "ENV_TEMPLATE_NAME": $env_template_name,
              "ENV_TEMPLATE_VERSION": $env_template_version
            }')"
          
          python3 /build_env/scripts/build_env/env_inventory_generation.py

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: generate_inventory_${{ env.SANITIZED_NAME }}
          path: ${{ github.workspace }}/environments/${{ env.FULL_ENV }}

      - name: Set output if successful
        id: set_output
        if: ${{ success() }}
        run: echo "successful_env=${{ matrix.environment }}" >> $GITHUB_OUTPUT