---

- name: Check if sd.yaml exists in {{ sd_output_dir }}/{{ sd_cluster_name }}/{{ sd_env }}/Inventory/solution-descriptor
  stat:
    path: "{{ sd_output_dir }}/{{ sd_cluster_name }}/{{ sd_env }}/Inventory/solution-descriptor/sd.yaml"
  register: sd_file_existence

- name: Load applications data from sd.yaml
  include_vars:
    file: "{{ sd_output_dir }}/{{ sd_cluster_name }}/{{ sd_env }}/Inventory/solution-descriptor/sd.yaml"
    name: sd_config
  when: sd_file_existence.stat.exists

- name: Check that 'applications'-key exists
  assert:
    that:
      - "'applications' in sd_config"
      - "sd_config.applications is sequence"
    success_msg: "Root 'applications' key exists and is a list"
    fail_msg: "Missing or invalid 'applications' key in root"
  when: sd_file_existence.stat.exists

- name: Validate each application entry
  assert:
    that:
      - "'version' in item"
      - "'deployPostfix' in item"
      - "item.version is string"
      - "item.deployPostfix is string"
    success_msg: "Valid application entry: {{ item }}"
    fail_msg: "Invalid application entry: {{ item | to_nice_json }}"
    quiet: true
  loop: "{{ sd_config.applications }}"
  loop_control:
    label: "Application {{ item.version | default('unknown') }}"
  when: sd_file_existence.stat.exists

- name: All checks passed
  debug:
    msg: "All required fields are present and valid!"
  when: sd_file_existence.stat.exists

- name: Find all possible namespace templates
  no_log: True
  find:
    paths: "{{ templates_dir }}/env_templates/{{ env_template_name }}/Namespaces"
    patterns:
      - "*.yaml.j2"
      - "*.yml.j2"
      - "*.j2"
    use_regex: false
  register: all_template_files
  when: sd_file_existence.stat.exists

- name: Build template path map by deployPostfix
  set_fact:
    postfix_template_map: "{{ dict(_postfix_keys | zip(_postfix_paths)) }}"
  vars:
    _postfix_paths: "{{ all_template_files.files | map(attribute='path') | list }}"
    _postfix_keys: >-
      {{
        all_template_files.files
        | map(attribute='path')
        | map('basename')
        | map('split', '.')
        | map('first')
        | list
      }}
  when: sd_file_existence.stat.exists

- name: Initialize solution_structure
  set_fact:
    solution_structure: {}
  when: sd_file_existence.stat.exists

- name: Build solution_structure variable
  set_fact:
    solution_structure: "{{ solution_structure | combine(_entry | from_json, recursive=True) }}"
  loop: "{{ sd_config.applications }}"
  loop_control:
    label: "{{ item.deployPostfix }}"
  vars:
    _entry: >-
      {% set version_full = item.version -%}
      {% set version = version_full.split(':')[1] -%}
      {% set solution = version_full.split(':')[0].split('-')[0] -%}
      {% set postfix = item.deployPostfix -%}
      {% set path = postfix_template_map.get(postfix, None) -%}

      {% if path %}
        {% set content = lookup('file', path).split('\n') -%}
        {% set ns_line = content | select('match', '^\\s*name:') | list | first -%}
        {% if ns_line %}
          {% set ns_val = ns_line.split(':', 1)[1] | trim | replace('"', '') -%}
        {% else %}
          {% set ns_val = None -%}
        {% endif -%}
      {% else %}
        {% set ns_val = None -%}
      {% endif -%}

      {% set small_dict = {
        solution: {
          postfix: {
            "version": version,
            "namespace": ns_val
          }
        }
      } %}

      {{ small_dict | to_json }}
  when: sd_file_existence.stat.exists

- name: Update formatting in solution_structure variable
  set_fact:
    solution_structure: "{{ solution_structure | regex_replace('({{)\\s*([^}\\s]+)\\s*(}})', '\\1 \\2 \\3') }}"
  when: sd_file_existence.stat.exists

- name: Merge solution_structure into current_env
  no_log: True
  set_fact:
    current_env: "{{ current_env | combine({'solution_structure': solution_structure}, recursive=True) }}"
  when: sd_file_existence.stat.exists

- name: Pre-render the existing templates
  template:
    src: "{{ item.template_path }}"
    dest: "{{ item.template_path | regex_replace('\\.j2$', '') }}"
  loop: "{{ env_template_path }}"
  when: current_env.solution_structure is defined and current_env.solution_structure != {} and sd_file_existence.stat.exists

- name: Re-write existing templates
  copy:
    src: "{{ item.template_path | regex_replace('\\.j2$', '') }}"
    dest: "{{ item.template_path }}"
    remote_src: yes
    force: yes
  loop: "{{ env_template_path }}"
  when: current_env.solution_structure is defined and current_env.solution_structure != {} and sd_file_existence.stat.exists

- name: Remove temporary created pre-rendered ymls
  file:
    path: "{{ item.template_path | regex_replace('\\.j2$', '') }}"
    state: absent
  loop: "{{ env_template_path }}"
  when: current_env.solution_structure is defined and current_env.solution_structure != {} and sd_file_existence.stat.exists